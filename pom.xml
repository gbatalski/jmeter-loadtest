<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
    <groupId>jmeter-loadtest</groupId>
	<artifactId>jmeter-loadtest</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	
    <properties>
        <jmeter.analysis.maven.plugin.version>1.0.1</jmeter.analysis.maven.plugin.version>
        <suppressJMeterOutput>false</suppressJMeterOutput>
        <!--
        <jmeter.ignore.error>true</jmeter.ignore.error>
        <jmeter.ignore.failure>true</jmeter.ignore.failure>
        -->
    </properties>
	<profiles>
		<profile>
			<id>default</id>
			<properties>
				<protocol>http</protocol>
				<host>localhost</host>
				<port>9292</port>
				<contextPath>/</contextPath>
				<users>100</users>
	            <loops>10</loops>
	            <file.dir>${project.basedir}/src/test/jmeter</file.dir>	           
			</properties>
			<activation>
			 <activeByDefault>true</activeByDefault>
			</activation>
		<build>
			<plugins>
				<plugin>
					<groupId>com.lazerycode.jmeter</groupId>
					<artifactId>jmeter-maven-plugin</artifactId>
					<version>1.6.1-SNAPSHOT</version>
					<executions>
						<execution>
							<id>jmeter-tests</id>
							<phase>verify</phase>
							<goals>
								<goal>jmeter</goal>
							</goals>
						</execution>
	
					</executions>
					<!-- 
					1. These properties can be passed from commandline as a jvm options to maven (-Dblabla=...)
					2. Then they would be merged into system.properties and propagated to jmeter
					3. Within the jmeter they are reachable via ${__P(blabla)} or ${__property(blabla)} 				
					See also:
					    - https://groups.google.com/forum/?fromgroups#!topic/maven-jmeter-plugin-users/rPWZ45Vzw-c
					    - http://wiki.apache.org/jmeter/JMeterFAQ#How_do_I_parameterize_my_JMeter_test_cases.3F	
					 -->				 
					<configuration>
						<propertiesSystem>
						    <protocol>${protocol}</protocol>
							<host>${host}</host>
							<port>${port}</port>
							<contextPath>${contextPath}</contextPath>
							<users>${users}</users>
							<loops>${loops}</loops>
							<file.dir>${file.dir}</file.dir>
						</propertiesSystem>
					</configuration>
				</plugin>
	
	
				<plugin>
				 <groupId>com.lazerycode.jmeter</groupId>
	             <artifactId>jmeter-analysis-maven-plugin</artifactId>
	             <version>${jmeter.analysis.maven.plugin.version}</version>
					<executions>
						<execution>
							<goals>
								<goal>analyze</goal>
							</goals>
							<phase>verify</phase>
							<configuration>
								<!-- An AntPath-Style pattern matching a JMeter XML result file to analyze. 
									Must be a fully qualified path. File may be GZiped, must end in .gz then. -->
								<source>${project.build.directory}/**/*.jtl</source>
				
								<!-- directory where to store analysis result files. At least the files 
									"summary.txt" and "summary.html" will be stored here. -->
								<target>${project.build.directory}/results</target>
				
								<!-- Request groups as a mapping from "group name" to "ant pattern". 
									A request uri that matches an ant pattern will be associated with the group 
									name. Request details, charts and CSV files are generated per requestGroup. 
									If not set, the threadgroup name of the request will be used. -->
								
								<requestGroups>
									<pages>/page/**</pages>
									<binaries>/binary/**</binaries>
								</requestGroups>
				                
								<!-- If set to true, additional files "<category>-sizes.csv" and "<category>-durations.csv" 
									will be stored. These files contain detailed information for response size 
									and response durations for every URI. -->
								<generateCSVs>true</generateCSVs>
				
								<!-- If set to true, additional chart files "<category>-durations.png" 
									will be created. -->
								<generateCharts>true</generateCharts>
				
								<!-- Template directory where custom freemarker templates are stored. 
									Freemarker templates are used for all generated output. (CSV files, HTML 
									files, console output) Templates must be stored in one of the following three 
									subfolders of the templateDirectory: csv html text The entry template must 
									be called "main.ftl". For example, templateDirectory/text/main.ftl will be 
									used for generating the console output. -->
								<!-- 
								templateDirectory>${project.basedir}/src/main/resources/</templateDirectory>
				                -->
								<!-- Mapping from resource URL to file name. Every resource will be downloaded 
									and stored in 'targetDirectory' with the given filename. Tokens "_FROM_" 
									and "_TO_" can be used as placeholders. These placeholders will be replaced 
									by timestamps of execution interval (formatted as ISO8601, e.g. '20111216T145509+0100'). -->
								<!--
								<remoteResources>
									<property>
										<name>http://yourhost/path?from=_FROM_&amp;to=_TO_</name>
										<value>my_resource.txt</value>
									</property>
								</remoteResources>
				                 -->
							</configuration>
						</execution>
					</executions>
				</plugin>
	
			</plugins>
		</build>
	</profile>
</profiles>

 <!-- in case we want to use a SNAPSHOT version of the jmeter-maven-plugin -->
  <pluginRepositories>
    <pluginRepository>
      <id>sonatype-snapshots</id>
      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
    </pluginRepository>
  </pluginRepositories>
</project>